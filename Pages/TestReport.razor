@page "/report/{meetingId}"
@using attendance_reg.Pages.Envoys
@using System.Text.Json

@inject MeetingReportService MeetingReportService
@inject MeetingEnvoy MeetingEnvoy
@inject EmailEnvoy EmailEnvoy


@if (Meeting is not null)
{
    <div class="space-y-2 my-2">
        <h1 class="text-2xl">@Meeting.FirstOrDefault()?.Name</h1>
        <h2>Speaker: @Meeting.FirstOrDefault()?.Speaker</h2>
        <p>Topic: @Meeting.FirstOrDefault()?.Topic</p>
    </div>
}
else
{
    <div>Loading...</div>
}

@if (FinalReports is not null)
{
    if (FinalReports.Count > 0)
    {
       @foreach (var report in FinalReports)
       {
          <div class="flex space-x-5">
               <div>
                   @report.Employee.Name @report.Employee.Surname
               </div>
               <div>
                   @report.Attendance.Status
               </div>
               <div class="h-10 w-10">
                   <img class="object-cover h-full w-full" src="@report.Signature.DataUrl" alt="">
               </div>
           </div>
       } 
        <button @onclick="@(async () => { await EmailReport();})" class="mt-5 w-24 border border-blue-500 rounded-lg bg-blue-500 text-white">Email Report</button>
    }
}
else
{
    <div>Loading...</div> 
}

@code{

    [Parameter]
    public string? MeetingId { get; set; }
    
    [CascadingParameter]
    public IModalService? Modal { get; set; }
    
    private List<FinalReport>? FinalReports { get; set; }
    private List<Meeting>? Meeting { get; set; }

    protected override async void OnInitialized()
    {
        Meeting = await MeetingEnvoy.GetMeeting(MeetingId);
        StateHasChanged();
        FinalReports = await MeetingReportService.GenerateReport(int.Parse(MeetingId));
        FinalReports = FinalReports.DistinctBy(it => it.Employee.Id).ToList();
        StateHasChanged();
    }

    private async Task EmailReport()
    {
        var parameters = new ModalParameters();
        
        var modalRef = Modal?.Show<EmailModal>("Enter Email", parameters);
        var modalResult = await modalRef?.Result!;
        
        if(modalResult.Cancelled)
            return;

        var emailAddress = modalResult.Data as string;
        Console.WriteLine(emailAddress);

        await EmailEnvoy.Send(emailAddress, Meeting.FirstOrDefault().Name, JsonSerializer.Serialize(FinalReports, new JsonSerializerOptions {WriteIndented = true}));
    }

}