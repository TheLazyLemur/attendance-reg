@using attendance_reg.Pages
@using attendance_reg.Pages.Envoys

<select value="@_value" @onchange="@(e => { UpdateStatus(EmployeeId, e.Value?.ToString()); })" class="h-full bg-white my-auto" name="@Id" id="@Id">
    @if (Statuses is not null)
    {
        @foreach (var status in Statuses)
        {
            <option value="@status.Name">@status.Name</option>
        }
    }
</select>

@code{
    [Parameter]
    public int Id { get; set; }
    
    [Parameter]
    public int EmployeeId { get; set; }
    
    [Parameter]
    public int MeetingId { get; set; }
    
    [Parameter]
    public List<Status>? Statuses { get; set; }
    
    [Parameter]
    public EventCallback<Tuple<int?, string?>> Callback { get; set; }
    
    [Inject]
    public MeetingEnvoy? MeetingEnvoy { get; set; }
    
    [Inject]
    public IJSRuntime? JsRuntime { get; set; }

    private string? _value = "Undefined";

    protected override async void OnInitialized()
    {
        if (MeetingEnvoy is null) return;
        
        var regs = await MeetingEnvoy.GetAttendanceRegister($"meeting_id=eq.{MeetingId}&employee_id=eq.{EmployeeId}");
        
        if(regs is null) return;
        
        regs = regs.OrderByDescending(it => it.Id).Where(it => it.EmployeeId == EmployeeId && it.MeetingId == MeetingId).ToList();
        _value = string.IsNullOrEmpty(regs.FirstOrDefault()?.Status) ? "Undefined" : regs.FirstOrDefault()?.Status;
        
        StateHasChanged();
    }

    private async void UpdateStatus(int? employeeId, string? status)
    {
        await Callback.InvokeAsync(new Tuple<int?, string?>(employeeId, status));
    }
}